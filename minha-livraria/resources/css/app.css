// JavaScript customizado para Minha Livraria

document.addEventListener('DOMContentLoaded', function() {
    
    // Inicializar tooltips do Bootstrap (se houver)
    const tooltipTriggerList = [].slice.call(document.querySelectorAll('[data-bs-toggle="tooltip"]'));
    const tooltipList = tooltipTriggerList.map(function (tooltipTriggerEl) {
        return new bootstrap.Tooltip(tooltipTriggerEl);
    });

    // Inicializar popovers do Bootstrap (se houver)
    const popoverTriggerList = [].slice.call(document.querySelectorAll('[data-bs-toggle="popover"]'));
    const popoverList = popoverTriggerList.map(function (popoverTriggerEl) {
        return new bootstrap.Popover(popoverTriggerEl);
    });

    // Auto-hide alerts ap√≥s 5 segundos
    const alerts = document.querySelectorAll('.alert');
    alerts.forEach(function(alert) {
        setTimeout(function() {
            if (alert && alert.classList.contains('show')) {
                const bsAlert = bootstrap.Alert.getOrCreateInstance(alert);
                if (bsAlert) {
                    bsAlert.close();
                }
            }
        }, 5000);
    });

    // Loading state para formul√°rios
    const forms = document.querySelectorAll('form');
    forms.forEach(function(form) {
        form.addEventListener('submit', function(e) {
            const submitButton = form.querySelector('button[type="submit"]');
            if (submitButton && !submitButton.disabled) {
                submitButton.disabled = true;
                const originalText = submitButton.innerHTML;
                submitButton.innerHTML = '<span class="loading-books me-2"></span>Processando...';
                
                // Re-enable ap√≥s 10 segundos como fallback
                setTimeout(function() {
                    submitButton.disabled = false;
                    submitButton.innerHTML = originalText;
                }, 10000);
            }
        });
    });

    // Confirma√ß√£o para a√ß√µes destrutivas
    const dangerButtons = document.querySelectorAll('.btn-danger, .btn-outline-danger');
    dangerButtons.forEach(function(button) {
        button.addEventListener('click', function(e) {
            const confirmMessage = button.getAttribute('data-confirm') || 'Tem certeza que deseja continuar?';
            if (!confirm(confirmMessage)) {
                e.preventDefault();
                return false;
            }
        });
    });

    // Contador do carrinho (atualizar dinamicamente)
    function updateCartCount() {
        fetch('/api/carrinho-count')
            .then(response => response.json())
            .then(data => {
                const cartBadge = document.querySelector('.navbar .badge');
                if (cartBadge) {
                    cartBadge.textContent = data.count || 0;
                    cartBadge.style.display = data.count > 0 ? 'inline' : 'none';
                }
            })
            .catch(error => console.log('Erro ao atualizar contador do carrinho:', error));
    }

    // Busca em tempo real (se houver campo de busca)
    const searchInput = document.querySelector('#busca');
    if (searchInput) {
        let searchTimeout;
        searchInput.addEventListener('input', function() {
            clearTimeout(searchTimeout);
            searchTimeout = setTimeout(function() {
                const query = searchInput.value.trim();
                if (query.length >= 3) {
                    // Implementar busca AJAX aqui se necess√°rio
                    console.log('Buscando por:', query);
                }
            }, 500);
        });
    }

    // Smooth scroll para links √¢ncora
    const anchorLinks = document.querySelectorAll('a[href^="#"]');
    anchorLinks.forEach(function(link) {
        link.addEventListener('click', function(e) {
            const target = document.querySelector(this.getAttribute('href'));
            if (target) {
                e.preventDefault();
                target.scrollIntoView({
                    behavior: 'smooth',
                    block: 'start'
                });
            }
        });
    });

    // Anima√ß√£o fade-in para elementos quando entram na viewport
    const observerOptions = {
        threshold: 0.1,
        rootMargin: '0px 0px -50px 0px'
    };

    const observer = new IntersectionObserver(function(entries) {
        entries.forEach(function(entry) {
            if (entry.isIntersecting) {
                entry.target.classList.add('fade-in');
                observer.unobserve(entry.target);
            }
        });
    }, observerOptions);

    // Observar cards de livros para anima√ß√£o
    const bookCards = document.querySelectorAll('.book-card');
    bookCards.forEach(function(card) {
        observer.observe(card);
    });

    // M√°scara para campos de telefone
    const phoneInputs = document.querySelectorAll('input[type="tel"], input[name*="telefone"]');
    phoneInputs.forEach(function(input) {
        input.addEventListener('input', function(e) {
            let value = e.target.value.replace(/\D/g, '');
            if (value.length <= 11) {
                value = value.replace(/(\d{2})(\d)/, '($1) $2');
                value = value.replace(/(\d{5})(\d{4})$/, '$1-$2');
                e.target.value = value;
            }
        });
    });

    // M√°scara para CEP
    const cepInputs = document.querySelectorAll('input[name*="cep"]');
    cepInputs.forEach(function(input) {
        input.addEventListener('input', function(e) {
            let value = e.target.value.replace(/\D/g, '');
            if (value.length <= 8) {
                value = value.replace(/(\d{5})(\d{3})/, '$1-$2');
                e.target.value = value;
            }
        });
    });

    // Preven√ß√£o de double-click em bot√µes
    const buttons = document.querySelectorAll('button[type="submit"]');
    buttons.forEach(function(button) {
        let isSubmitting = false;
        button.addEventListener('click', function(e) {
            if (isSubmitting) {
                e.preventDefault();
                return false;
            }
            isSubmitting = true;
            setTimeout(() => isSubmitting = false, 3000);
        });
    });

    // Lazy loading para imagens (se suportado)
    if ('loading' in HTMLImageElement.prototype) {
        const images = document.querySelectorAll('img[data-src]');
        images.forEach(function(img) {
            img.src = img.dataset.src;
            img.classList.remove('loading');
        });
    }

    // Toast notifications (se houver)
    function showToast(message, type = 'info') {
        const toast = document.createElement('div');
        toast.className = `alert alert-${type} alert-dismissible fade show position-fixed`;
        toast.style.cssText = 'top: 20px; right: 20px; z-index: 9999; min-width: 300px;';
        toast.innerHTML = `
            ${message}
            <button type="button" class="btn-close" data-bs-dismiss="alert"></button>
        `;
        document.body.appendChild(toast);

        // Auto remove ap√≥s 5 segundos
        setTimeout(function() {
            if (toast.parentNode) {
                toast.remove();
            }
        }, 5000);
    }

    // Expor fun√ß√£o showToast globalmente
    window.showToast = showToast;

    console.log('üéâ Minha Livraria carregada com sucesso!');
});

// Fun√ß√£o para adicionar item ao carrinho via AJAX (exemplo)
function addToCart(livroId, quantidade = 1) {
    const formData = new FormData();
    formData.append('livro_id', livroId);
    formData.append('quantidade', quantidade);
    formData.append('_token', document.querySelector('meta[name="csrf-token"]').getAttribute('content'));

    fetch('/carrinho/adicionar', {
        method: 'POST',
        body: formData,
        headers: {
            'X-Requested-With': 'XMLHttpRequest'
        }
    })
    .then(response => response.json())
    .then(data => {
        if (data.success) {
            showToast('‚úÖ Livro adicionado ao carrinho!', 'success');
            updateCartCount();
        } else {
            showToast('‚ùå Erro ao adicionar livro', 'danger');
        }
    })
    .catch(error => {
        console.error('Erro:', error);
        showToast('‚ùå Erro interno do servidor', 'danger');
    });
}

// Fun√ß√£o para remover item do carrinho
function removeFromCart(itemId) {
    if (!confirm('Remover este item do carrinho?')) {
        return;
    }

    fetch(`/carrinho/remover/${itemId}`, {
        method: 'DELETE',
        headers: {
            'X-CSRF-TOKEN': document.querySelector('meta[name="csrf-token"]').getAttribute('content'),
            'X-Requested-With': 'XMLHttpRequest'
        }
    })
    .then(response => response.json())
    .then(data => {
        if (data.success) {
            showToast('üóëÔ∏è Item removido do carrinho', 'info');
            location.reload(); // Recarregar p√°gina
        }
    })
    .catch(error => {
        console.error('Erro:', error);
        showToast('‚ùå Erro ao remover item', 'danger');
    });
}

// Expor fun√ß√µes globalmente
window.addToCart = addToCart;
window.removeFromCart = removeFromCart;